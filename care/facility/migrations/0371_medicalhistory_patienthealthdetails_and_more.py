# Generated by Django 4.2.2 on 2023-07-08 16:46

import uuid
from datetime import date

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

import care.facility.models.mixins.permissions.patient
from care.facility.models.patient_base import REVERSE_DISEASE_CHOICES


def create_health_details(apps, schema_editor):
    health_details_model = apps.get_model("facility", "PatientHealthDetails")
    patient_registration_model = apps.get_model("facility", "PatientRegistration")
    patients = patient_registration_model.objects.all()

    health_details_objs = []
    for patient in patients:
        has_allergy = False
        allergies = ""
        blood_group = None
        weight = 0.0
        height = 0.0

        if patient.allergies:
            has_allergy = True
            allergies = patient.allergies

        if patient.blood_group is not None:
            blood_group = patient.blood_group

        if patient.last_consultation is not None:
            consultation = patient.last_consultation

            if patient.last_consultation.weight is not None:
                weight = patient.last_consultation.weight
            if patient.last_consultation.height is not None:
                height = patient.last_consultation.height

            health_details_obj = health_details_model(
                weight=weight,
                height=height,
                consultation=consultation,
                has_allergy=has_allergy,
                allergies=allergies,
                blood_group=blood_group,
            )

            health_details_objs.append(health_details_obj)

    health_details_model.objects.bulk_create(health_details_objs)


def create_medical_history(apps, schema_editor):
    patient_registration = apps.get_model("facility", "PatientRegistration")
    patients = patient_registration.objects.all()

    medical_history = apps.get_model("facility", "MedicalHistory")
    medical_history_objs = []
    for patient in patients:
        if patient.last_consultation is not None:
            medical_history_objs.append(
                medical_history(
                    consultation=patient.last_consultation,
                    ongoing_medication=patient.ongoing_medication,
                    present_health=patient.present_health,
                )
            )

    medical_history.objects.bulk_create(medical_history_objs)


def create_vaccination_history(apps, schema_editor):
    vaccination_history = apps.get_model("facility", "VaccinationHistory")
    patient_registration_model = apps.get_model("facility", "PatientRegistration")
    patients = patient_registration_model.objects.all()

    vaccine_objs = []
    for patient in patients:
        if (
            patient.vaccine_name
            and patient.last_consultation
            and patient.last_consultation.health_details
        ):
            vaccine_objs.append(
                vaccination_history(
                    health_details=patient.last_consultation.health_details,
                    vaccine=patient.vaccine_name,
                    doses=patient.number_of_doses,
                    date=patient.last_vaccinated_date,
                    precision=0,
                )
            )

    vaccination_history.objects.bulk_create(vaccine_objs)


disease_list = []


def store_disease_history(apps, schema_editor):
    disease_history = apps.get_model("facility", "Disease")
    diseases = disease_history.objects.filter(deleted=False)

    for disease in diseases:
        if disease.patient.last_consultation:
            disease_list.append(
                {
                    "consultation": disease.patient.last_consultation,
                    "disease": REVERSE_DISEASE_CHOICES[disease.disease],
                    "details": disease.details,
                    "date": date.today(),
                    "precision": 0,
                }
            )


def create_disease_history(apps, schema_editor):
    disease_model = apps.get_model("facility", "Disease")
    consultation_model = apps.get_model("facility", "PatientConsultation")

    disease_objs = []
    for disease in disease_list:
        if disease["consultation"] is not None:
            consultation = disease.pop("consultation")
            consultation_obj = consultation_model.objects.get(id=consultation.id)
            medical_history = consultation_obj.medical_history
            disease_objs.append(
                disease_model(**disease, medical_history=medical_history)
            )
    disease_model.objects.bulk_create(disease_objs)


def link_data(apps, schema_editor):
    health_details_model = apps.get_model("facility", "PatientHealthDetails")
    medical_history_model = apps.get_model("facility", "MedicalHistory")
    consultation_model = apps.get_model("facility", "PatientConsultation")

    health_details_objs = health_details_model.objects.all()
    medical_history_objs = medical_history_model.objects.all()

    for health_details in health_details_objs:
        consultation_obj = consultation_model.objects.get(
            id=health_details.consultation.id
        )
        consultation_obj.health_details = health_details
        consultation_obj.save(update_fields=["health_details"])

    for medical_history in medical_history_objs:
        consultation_obj = consultation_model.objects.get(
            id=medical_history.consultation.id
        )
        consultation_obj.medical_history = medical_history
        consultation_obj.save(update_fields=["medical_history"])


class Migration(migrations.Migration):
    dependencies = [
        ("facility", "0370_merge_20230705_1500"),
    ]

    operations = [
        migrations.CreateModel(
            name="PatientHealthDetails",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "external_id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                (
                    "created_date",
                    models.DateTimeField(auto_now_add=True, db_index=True, null=True),
                ),
                (
                    "modified_date",
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                ("deleted", models.BooleanField(db_index=True, default=False)),
                (
                    "family_details",
                    models.TextField(
                        blank=True, default="", verbose_name="Patient's Family Details"
                    ),
                ),
                ("has_allergy", models.BooleanField(default=False)),
                (
                    "allergies",
                    models.TextField(
                        blank=True, default="", verbose_name="Patient's Known Allergies"
                    ),
                ),
                (
                    "blood_group",
                    models.CharField(
                        choices=[
                            ("A+", "A+"),
                            ("A-", "A-"),
                            ("B+", "B+"),
                            ("B-", "B-"),
                            ("AB+", "AB+"),
                            ("AB-", "AB-"),
                            ("O+", "O+"),
                            ("O-", "O-"),
                            ("UNK", "UNKNOWN"),
                        ],
                        max_length=4,
                        null=True,
                        verbose_name="Blood Group of Patient",
                    ),
                ),
                (
                    "height",
                    models.FloatField(
                        default=None,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Patient's Height in CM",
                    ),
                ),
                (
                    "weight",
                    models.FloatField(
                        default=None,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Patient's Weight in KG",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                care.facility.models.mixins.permissions.patient.PatientRelatedPermissionMixin,
            ),
        ),
        migrations.CreateModel(
            name="VaccinationHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("vaccine", models.CharField(max_length=100)),
                ("doses", models.IntegerField(default=0)),
                ("date", models.DateField(blank=True, null=True)),
                ("precision", models.IntegerField(default=0)),
                ("deleted", models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name="patientconsultation",
            name="health_details",
            field=models.ForeignKey(
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="facility.patienthealthdetails",
            ),
        ),
        migrations.AddConstraint(
            model_name="vaccinationhistory",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", False)),
                fields=("health_details", "vaccine"),
                name="unique_health_details_vaccine",
            ),
        ),
        migrations.RunPython(create_health_details, migrations.RunPython.noop),
        migrations.CreateModel(
            name="MedicalHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "external_id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                (
                    "created_date",
                    models.DateTimeField(auto_now_add=True, db_index=True, null=True),
                ),
                (
                    "modified_date",
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                ("deleted", models.BooleanField(db_index=True, default=False)),
                (
                    "ongoing_medication",
                    models.TextField(
                        blank=True,
                        default="",
                        verbose_name="Already pescribed medication if any",
                    ),
                ),
                (
                    "present_health",
                    models.TextField(
                        blank=True,
                        default="",
                        verbose_name="Patient's Current Health Details",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                care.facility.models.mixins.permissions.patient.PatientRelatedPermissionMixin,
            ),
        ),
        migrations.RemoveConstraint(
            model_name="disease",
            name="unique_patient_disease",
        ),
        migrations.RunPython(store_disease_history, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="disease",
            name="patient",
        ),
        migrations.AddField(
            model_name="disease",
            name="date",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="disease",
            name="precision",
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name="disease",
            name="disease",
            field=models.CharField(max_length=100),
        ),
        migrations.AddConstraint(
            model_name="disease",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", False)),
                fields=("medical_history", "disease"),
                name="unique_medical_history_disease",
            ),
        ),
        migrations.AddField(
            model_name="vaccinationhistory",
            name="health_details",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="vaccination_history",
                to="facility.patienthealthdetails",
            ),
        ),
        migrations.AddField(
            model_name="patienthealthdetails",
            name="consultation",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="facility.patientconsultation",
            ),
        ),
        migrations.AddField(
            model_name="medicalhistory",
            name="consultation",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="facility.patientconsultation",
            ),
        ),
        migrations.AddField(
            model_name="disease",
            name="medical_history",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="patient_diseases",
                to="facility.medicalhistory",
            ),
        ),
        migrations.AddField(
            model_name="patientconsultation",
            name="medical_history",
            field=models.ForeignKey(
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="facility.medicalhistory",
            ),
        ),
        migrations.RunPython(create_medical_history, migrations.RunPython.noop),
        migrations.RunPython(link_data, migrations.RunPython.noop),
        migrations.RunPython(create_vaccination_history, migrations.RunPython.noop),
        migrations.RunPython(create_disease_history, migrations.RunPython.noop),
    ]
